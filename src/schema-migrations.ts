import * as fs from 'fs';
import * as path from 'path';
import { execSync } from 'child_process';

// Get command line arguments
const args = process.argv.slice(2);

// Validate command line arguments
if (args.length === 0) {
  console.error('Error: Missing required subcommand for prisma migrate');
  console.log('Usage: node -r ts-node/register src/schema-migrations.ts <subcommand> [options]');
  console.log('Available subcommands: dev, deploy, reset, status, resolve, diff etc ...');
  process.exit(1);
}

// Define paths
const schemaDir = path.resolve(__dirname, '../schema');
const prismaDir = path.resolve(__dirname, '../prisma');
const prismaSchemaPath = path.join(prismaDir, 'schema.prisma');

// Function to ensure directory exists
function ensureDirectoryExists(dirPath: string): void {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
    console.log(`Created directory: ${dirPath}`);
  }
}

// Function to read file content
function readFileContent(filePath: string): string {
  try {
    return fs.readFileSync(filePath, 'utf8');
  } catch (error) {
    console.error(`Error reading file ${filePath}:`, error);
    return '';
  }
}

// Function to write file content
function writeFileContent(filePath: string, content: string): void {
  try {
    fs.writeFileSync(filePath, content, 'utf8');
    console.log(`Written content to: ${filePath}`);
  } catch (error) {
    console.error(`Error writing to file ${filePath}:`, error);
    process.exit(1);
  }
}

// Main function to merge schema files
function mergeSchemaFiles(): void {
  try {
    // Ensure directories exist
    ensureDirectoryExists(schemaDir);
    ensureDirectoryExists(prismaDir);

    // Check if schema.prisma exists, if not create it, if yes clear it
    if (!fs.existsSync(prismaSchemaPath)) {
      writeFileContent(prismaSchemaPath, '');
      console.log(`Created new file: ${prismaSchemaPath}`);
    } else {
      writeFileContent(prismaSchemaPath, '');
      console.log(`Cleared existing file: ${prismaSchemaPath}`);
    }

    // Get all schema files
    const schemaFiles = fs.readdirSync(schemaDir)
      .filter(file => file.endsWith('.prisma'))
      .map(file => path.join(schemaDir, file));

    if (schemaFiles.length === 0) {
      console.error('Error: No .prisma files found in schema directory');
      process.exit(1);
    }

    // Sort files to ensure root.prisma is first
    schemaFiles.sort((a, b) => {
      const aName = path.basename(a);
      const bName = path.basename(b);
      
      if (aName === 'root.prisma') return -1;
      if (bName === 'root.prisma') return 1;
      
      return aName.localeCompare(bName);
    });

    // Merge files
    let mergedContent = '// This file is automatically generated when migrations are applied.\n// Any changes to this file will be lost.\n\n';
    for (const file of schemaFiles) {
      const content = readFileContent(file);
      if (content) {
        mergedContent += `// Content from ${path.basename(file)}\n`;
        mergedContent += content;
        mergedContent += '\n\n';
        console.log(`Merged content from: ${path.basename(file)}`);
      }
    }

    // Write merged content to schema.prisma
    writeFileContent(prismaSchemaPath, mergedContent);

    // Execute prisma migrate command with arguments
    const command = `npx prisma migrate ${args.join(' ')}`;
    console.log(`Executing command: ${command}`);
    execSync(command, { stdio: 'inherit' });
    console.log('Schema migration completed successfully');
  } catch (error) {
    console.error('Error during schema migration:', error);
    process.exit(1);
  }
}

// Execute the main function
mergeSchemaFiles();
